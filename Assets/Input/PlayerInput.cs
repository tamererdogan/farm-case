//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""a27403c8-f5da-40f6-9db8-12abcdf8e045"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4314eb50-f44d-4b25-8309-d5428f862fb9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""3f3b2f2b-76ba-46ea-a35a-cefe2161aff6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InventoryButton"",
                    ""type"": ""Button"",
                    ""id"": ""38b220d0-c325-4b67-b9df-6547e184fed3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MarketButton"",
                    ""type"": ""Button"",
                    ""id"": ""73ad16c9-a1d9-442a-9e0d-f870d5292b76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickButton"",
                    ""type"": ""Button"",
                    ""id"": ""78b6846c-2a32-4f12-872e-54f653f82685"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EscapeButton"",
                    ""type"": ""Button"",
                    ""id"": ""2b9965e9-a92c-4aac-896b-5fca0a0ff15c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TaskButton"",
                    ""type"": ""Button"",
                    ""id"": ""ce757dbe-de0a-493c-a5f0-bf3cd57c40c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LogButton"",
                    ""type"": ""Button"",
                    ""id"": ""fa7f1415-77e5-4ce3-b0ca-ae6fe6fc8002"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""99953c66-527a-4337-a933-48d0bfb19702"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c75bac0e-632c-44e0-a935-fd909b1b4b37"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f26c1b68-99a1-412b-acaf-d778d8a846d6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""32cf1330-48b7-4270-9c4b-9aa5b77acca3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1d0906d0-6c2e-476a-a617-ef9f4a402de9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""be590ac1-1806-4dfa-97bb-40d1bb7daecd"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d93d183-b4d8-405b-9bcb-e9b0eb6cd873"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""InventoryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae2d4253-38ff-4898-87d0-cde860b0890e"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""MarketButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc31d7a5-140b-40b1-9a63-e3baac3d325c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""PickButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbccf485-2aec-4b06-bb42-8e7cbfb8a14a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""EscapeButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb59b044-45ef-4f15-a9fd-c1637b196903"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""TaskButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3727ee62-1136-4d71-a51c-895b0397abba"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""LogButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keybord&Mouse"",
            ""bindingGroup"": ""Keybord&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_InventoryButton = m_Player.FindAction("InventoryButton", throwIfNotFound: true);
        m_Player_MarketButton = m_Player.FindAction("MarketButton", throwIfNotFound: true);
        m_Player_PickButton = m_Player.FindAction("PickButton", throwIfNotFound: true);
        m_Player_EscapeButton = m_Player.FindAction("EscapeButton", throwIfNotFound: true);
        m_Player_TaskButton = m_Player.FindAction("TaskButton", throwIfNotFound: true);
        m_Player_LogButton = m_Player.FindAction("LogButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_InventoryButton;
    private readonly InputAction m_Player_MarketButton;
    private readonly InputAction m_Player_PickButton;
    private readonly InputAction m_Player_EscapeButton;
    private readonly InputAction m_Player_TaskButton;
    private readonly InputAction m_Player_LogButton;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @InventoryButton => m_Wrapper.m_Player_InventoryButton;
        public InputAction @MarketButton => m_Wrapper.m_Player_MarketButton;
        public InputAction @PickButton => m_Wrapper.m_Player_PickButton;
        public InputAction @EscapeButton => m_Wrapper.m_Player_EscapeButton;
        public InputAction @TaskButton => m_Wrapper.m_Player_TaskButton;
        public InputAction @LogButton => m_Wrapper.m_Player_LogButton;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @InventoryButton.started += instance.OnInventoryButton;
            @InventoryButton.performed += instance.OnInventoryButton;
            @InventoryButton.canceled += instance.OnInventoryButton;
            @MarketButton.started += instance.OnMarketButton;
            @MarketButton.performed += instance.OnMarketButton;
            @MarketButton.canceled += instance.OnMarketButton;
            @PickButton.started += instance.OnPickButton;
            @PickButton.performed += instance.OnPickButton;
            @PickButton.canceled += instance.OnPickButton;
            @EscapeButton.started += instance.OnEscapeButton;
            @EscapeButton.performed += instance.OnEscapeButton;
            @EscapeButton.canceled += instance.OnEscapeButton;
            @TaskButton.started += instance.OnTaskButton;
            @TaskButton.performed += instance.OnTaskButton;
            @TaskButton.canceled += instance.OnTaskButton;
            @LogButton.started += instance.OnLogButton;
            @LogButton.performed += instance.OnLogButton;
            @LogButton.canceled += instance.OnLogButton;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @InventoryButton.started -= instance.OnInventoryButton;
            @InventoryButton.performed -= instance.OnInventoryButton;
            @InventoryButton.canceled -= instance.OnInventoryButton;
            @MarketButton.started -= instance.OnMarketButton;
            @MarketButton.performed -= instance.OnMarketButton;
            @MarketButton.canceled -= instance.OnMarketButton;
            @PickButton.started -= instance.OnPickButton;
            @PickButton.performed -= instance.OnPickButton;
            @PickButton.canceled -= instance.OnPickButton;
            @EscapeButton.started -= instance.OnEscapeButton;
            @EscapeButton.performed -= instance.OnEscapeButton;
            @EscapeButton.canceled -= instance.OnEscapeButton;
            @TaskButton.started -= instance.OnTaskButton;
            @TaskButton.performed -= instance.OnTaskButton;
            @TaskButton.canceled -= instance.OnTaskButton;
            @LogButton.started -= instance.OnLogButton;
            @LogButton.performed -= instance.OnLogButton;
            @LogButton.canceled -= instance.OnLogButton;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeybordMouseSchemeIndex = -1;
    public InputControlScheme KeybordMouseScheme
    {
        get
        {
            if (m_KeybordMouseSchemeIndex == -1) m_KeybordMouseSchemeIndex = asset.FindControlSchemeIndex("Keybord&Mouse");
            return asset.controlSchemes[m_KeybordMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInventoryButton(InputAction.CallbackContext context);
        void OnMarketButton(InputAction.CallbackContext context);
        void OnPickButton(InputAction.CallbackContext context);
        void OnEscapeButton(InputAction.CallbackContext context);
        void OnTaskButton(InputAction.CallbackContext context);
        void OnLogButton(InputAction.CallbackContext context);
    }
}
